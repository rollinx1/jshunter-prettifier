name: Build and Release Prettifier

on:
  push:
    branches: [ main, master ]  # Trigger on push to main/master
    tags:
      - 'v*' 
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Don't cancel other builds if one fails
      matrix:
        target:
          - os: linux
            arch: x64
          - os: linux  
            arch: arm64
          - os: windows
            arch: x64
          - os: darwin
            arch: x64
          - os: darwin
            arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Build binary for ${{ matrix.target.os }}-${{ matrix.target.arch }}
      run: |
        if [ "${{ matrix.target.os }}" = "windows" ]; then
          # For Windows, build with a temporary name first
          bun build src/index.ts --compile --minify \
            --target bun-${{ matrix.target.os }}-${{ matrix.target.arch }} \
            --outfile temp-binary
          
          # List files to see what was actually created
          echo "Files created:"
          ls -la temp-binary* || true
          ls -la prettifier* || true
          
          # Rename to final name with .exe extension
          if [ -f "temp-binary" ]; then
            mv temp-binary prettifier-${{ matrix.target.os }}-${{ matrix.target.arch }}.exe
          elif [ -f "temp-binary.exe" ]; then
            mv temp-binary.exe prettifier-${{ matrix.target.os }}-${{ matrix.target.arch }}.exe
          else
            echo "Error: Could not find built binary"
            exit 1
          fi
        else
          # For Unix systems, build normally
          bun build src/index.ts --compile --minify \
            --target bun-${{ matrix.target.os }}-${{ matrix.target.arch }} \
            --outfile prettifier-${{ matrix.target.os }}-${{ matrix.target.arch }}
        fi
        
        # List final files
        echo "Final files:"
        ls -la prettifier-*
        
    - name: Make binary executable and fix permissions
      run: |
        # Fix permissions for all files
        chmod 755 prettifier-* || true
        
        # List final permissions
        ls -la prettifier-*
        
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: prettifier-${{ matrix.target.os }}-${{ matrix.target.arch }}
        path: prettifier-${{ matrix.target.os }}-${{ matrix.target.arch }}*
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: List downloaded files
      run: find . -name "prettifier-*" -type f
      
    - name: Generate checksums
      run: |
        find . -name "prettifier-*" -type f -exec sha256sum {} \; > checksums.txt
        cat checksums.txt
        
    - name: Create/Update Latest Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: latest
        name: "Latest"
        files: |
          */prettifier-*
          checksums.txt
        generate_release_notes: false
        prerelease: false
        make_latest: true
  
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 